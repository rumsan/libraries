// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ++++++++++++++++++ START: @rumsan/user - User +++++++++++++++++++++++++++++++

// ===================User Model==================
model User {
  id        Int     @id @default(autoincrement())
  cuid      String  @unique @default(cuid())
  name      String
  gender    Gender  @default(UNKNOWN)
  email     String?
  phone     String?
  wallet    String?
  notes     String? @db.Text()
  sessionId String?

  Auth      Auth[]
  UserRole  UserRole[]
  Signup    Signup[]
  UserDetails UserDetails?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
  deletedAt DateTime?
  createdBy String?
  updatedBy String?

  @@map("tbl_users")
}

model UserDetails {
  id        Int     @id @default(autoincrement())
  cuid      String  @unique
  extras    Json?   @db.JsonB()

  user      User     @relation(fields: [cuid], references: [cuid]) // Reference to the User model

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
  deletedAt DateTime?
  createdBy String?
  updatedBy String?

  @@map("tbl_users_details")
}
enum Gender {
  MALE
  FEMALE
  OTHER
  UNKNOWN
}

// ++++++++++++++++++ END: @rumsan/user - User +++++++++++++++++++++++++++++++
// ++++++++++++++++++ START: @rumsan/user - Role/Auth ++++++++++++++++++++++++

// ===================Role Model==================
model Role {
  id       Int     @unique @default(autoincrement())
  name     String  @unique @db.VarChar()
  isSystem Boolean @default(false)

  Permission Permission[]
  UserRole   UserRole[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
  createdBy Int?
  updatedBy Int?

  @@map("tbl_auth_roles")
}

// ===================Permission Model==================
model Permission {
  id         Int     @unique @default(autoincrement())
  roleId     Int
  action     String  @db.VarChar()
  subject    String  @db.VarChar()
  inverted   Boolean @default(false)
  conditions Json?   @db.JsonB()
  reason     String? @db.Text()

  Role Role @relation(fields: [roleId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_auth_permissions")
}

model UserRole {
  id     Int       @id @default(autoincrement())
  userId Int
  roleId Int
  expiry DateTime?

  User User @relation(fields: [userId], references: [id])
  Role Role @relation(fields: [roleId], references: [id])

  createdAt DateTime @default(now())
  createdBy Int?

  @@unique([userId, roleId], name: "userRoleIdentifier")
  @@map("tbl_users_roles")
}

model Auth {
  id            Int       @id @default(autoincrement())
  userId        Int
  service       Service
  serviceId     String
  details       Json?     @db.JsonB()
  challenge     String?
  falseAttempts Int       @default(0)
  isLocked      Boolean   @default(false)
  lockedOnAt    DateTime?
  lastLoginAt   DateTime?

  User    User          @relation(fields: [userId], references: [id])
  AuthLog AuthSession[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
  deletedAt DateTime?

  @@unique([service, serviceId], name: "authIdentifier")
  @@map("tbl_auth")
}

model AuthSession {
  id        Int     @id @default(autoincrement())
  clientId  String
  sessionId String  @unique @default(cuid())
  authId    Int
  ip        String?
  details   Json?   @db.JsonB()
  userAgent String?

  Auth Auth @relation(fields: [authId], references: [id])

  createdAt DateTime @default(now())

  @@map("tbl_auth_sessions")
}

enum Service {
  API
  EMAIL
  PHONE
  WALLET
  GOOGLE
  APPLE
  FACEBOOK
  TWITTER
  GITHUB
  LINKEDIN
}

// ++++++++++++++++++ END: @rumsan/user - Role/Auth ++++++++++++++++++++++++
// ++++++++++++++++++ START: @rumsan/user - Signup +++++++++++++++++++++++++

model Signup {
  id             Int          @id @default(autoincrement())
  cuid           String       @unique @default(cuid())
  userIdentifier String?
  data           Json?        @db.JsonB()
  status         SignupStatus @default(PENDING)
  rejectedReason String?
  approvedBy     Int?
  approvedAt     DateTime?

  User User? @relation(fields: [approvedBy], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_users_signups")
}

enum SignupStatus {
  PENDING
  APPROVED
  FAILED
  REJECTED
}

// ++++++++++++++++++ END: @rumsan/user - Signup +++++++++++++++++++++++++++

// ++++++++++++++++++ START: @rumsan/extensions/settings +++++++++++++++++++++++++++

model Setting {
  name           String          @id @unique
  value          Json
  dataType       SettingDataType
  requiredFields String[]
  isReadOnly     Boolean         @default(false)
  isPrivate      Boolean         @default(true)

  @@map("tbl_settings")
}

enum SettingDataType {
  STRING
  NUMBER
  BOOLEAN
  OBJECT
}

// ++++++++++++++++++ END: @rumsan/extensions/settings +++++++++++++++++++++++++++

// ++++++++++++++++++ START: @rumsan/extensions/apps +++++++++++++++++++++++++++
enum ApplicationEnvironment {
  PRODUCTION
  STAGING
  DEVELOPMENT
  TEST
}

model Application {
  cuid        String                 @id @default(cuid())
  name        String
  publicKey   String
  description String?
  environment ApplicationEnvironment

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("tbl_applications")
}

// ++++++++++++++++++ END: @rumsan/extensions/apps ++++++++++++++++++++++++++++++++
